{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/andre/Documents/Studier/accessible-drinks/src/app/utils/cache.js"],"sourcesContent":["/**\n * This is a simple cache that stores the results of the api calls\n */\nclass Cache {\n  constructor() {\n    this.cache = {};\n    this.nbrItems = 0;\n  }\n\n  /** get the key from cacheretusn undefined if the key is not present in cache\n   *\n   * @param key either the id for a drink or name of the search\n   * @return a json of either one drink or many drinks, undefined if the key is not present in cache\n   */\n  get(key) {\n    return this.cache[key];\n  }\n\n  set(key, value) {\n    // we do not want to store too much but going to like 200 might be completely fine\n    if (this.nbrItems > 50) {\n      this.cache = {};\n      this.nbrItems = 0;\n    }\n    this.nbrItems++;\n    this.cache[key] = value;\n    if (Array.isArray(value)) {\n      value.forEach(item => (this.cache[item['idDrink']] = item));\n      this.nbrItems += value.length;\n    }\n  }\n}\n\n// nice lil singleton\nexport default new Cache();\n"],"names":[],"mappings":"AAAA;;CAEC;;;AACD,MAAM;IACJ,aAAc;QACZ,IAAI,CAAC,KAAK,GAAG,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG;IAClB;IAEA;;;;GAIC,GACD,IAAI,GAAG,EAAE;QACP,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI;IACxB;IAEA,IAAI,GAAG,EAAE,KAAK,EAAE;QACd,kFAAkF;QAClF,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI;YACtB,IAAI,CAAC,KAAK,GAAG,CAAC;YACd,IAAI,CAAC,QAAQ,GAAG;QAClB;QACA,IAAI,CAAC,QAAQ;QACb,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG;QAClB,IAAI,MAAM,OAAO,CAAC,QAAQ;YACxB,MAAM,OAAO,CAAC,CAAA,OAAS,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG;YACrD,IAAI,CAAC,QAAQ,IAAI,MAAM,MAAM;QAC/B;IACF;AACF;uCAGe,IAAI"}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 48, "column": 0}, "map": {"version":3,"sources":["file:///Users/andre/Documents/Studier/accessible-drinks/src/app/utils/fetchJson.tsx"],"sourcesContent":["export default async function fetchJson(url: string) {\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(`${url} returned status ${response.status}`);\n    }\n\n    return response.text().then(text => {\n      return text ? JSON.parse(text) : {};\n    });\n  });\n}\n"],"names":[],"mappings":";;;AAAe,eAAe,UAAU,GAAW;IACjD,OAAO,MAAM,KAAK,IAAI,CAAC,CAAA;QACrB,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,GAAG,IAAI,iBAAiB,EAAE,SAAS,MAAM,EAAE;QAC7D;QAEA,OAAO,SAAS,IAAI,GAAG,IAAI,CAAC,CAAA;YAC1B,OAAO,OAAO,KAAK,KAAK,CAAC,QAAQ,CAAC;QACpC;IACF;AACF"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///Users/andre/Documents/Studier/accessible-drinks/src/app/utils/searchLoader.tsx"],"sourcesContent":["import cache from './cache';\nimport fetchJson from './fetchJson';\n\nexport default async function searchLoader(query: string): Promise<any[]> {\n  return (\n    cache.get(query) ||\n    fetchJson(\n      `https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${query}`\n    ).then(res => {\n      const drinks = res.drinks;\n      cache.set(query, drinks);\n      return drinks;\n    })\n  );\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEe,eAAe,aAAa,KAAa;IACtD,OACE,+HAAA,CAAA,UAAK,CAAC,GAAG,CAAC,UACV,CAAA,GAAA,oIAAA,CAAA,UAAS,AAAD,EACN,CAAC,yDAAyD,EAAE,OAAO,EACnE,IAAI,CAAC,CAAA;QACL,MAAM,SAAS,IAAI,MAAM;QACzB,+HAAA,CAAA,UAAK,CAAC,GAAG,CAAC,OAAO;QACjB,OAAO;IACT;AAEJ"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}